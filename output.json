Commit...#!/usr/bin/env python
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...# Copyright 2011, Dan Gindikin <dgindikin -AT- gmail.com>
Longevidad....2024-03-04Commit...#
Longevidad....2024-03-04Commit...# This program is free software; you can redistribute it and/or modify it under
Longevidad....2024-03-04Commit...# the terms of the GNU General Public License as published by the Free Software
Longevidad....2024-03-04Commit...# Foundation; either version 2 of the License, or (at your option) any later
Longevidad....2024-03-04Commit...# version.
Longevidad....2024-03-04Commit...#
Longevidad....2024-03-04Commit...# This program is distributed in the hope that it will be useful, but WITHOUT
Longevidad....2024-03-04Commit...# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
Longevidad....2024-03-04Commit...# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
Longevidad....2024-03-04Commit...# details.
Longevidad....2024-03-04Commit...#
Longevidad....2024-03-04Commit...# You should have received a copy of the GNU General Public License along with
Longevidad....2024-03-04Commit...# this program; if not, write to the Free Software Foundation, Inc., 51
Longevidad....2024-03-04Commit...# Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...import sys
Longevidad....2024-03-04Commit...import os
Longevidad....2024-03-04Commit...import string
Longevidad....2024-03-04Commit...import re
Longevidad....2024-03-04Commit...import getopt
Longevidad....2024-03-04Commit...import json
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...VERSION = '0.2'
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...Chunk_Header_Pat = re.compile('@@ -([0-9]+)(?:,([0-9]+))? \+([0-9]+)(?:,([0-9]+))? @@')
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...class struct:
Longevidad....2024-03-04Commit...  pass
Longevidad....2024-03-04Commit...  
Longevidad....2024-03-04Commit...# Este codigo sirve para analizar encabezados de fragmentos (chunks) 
Longevidad....2024-03-04Commit...# Devuelve una linea de enteros tras extraer informacion sobre las
Longevidad....2024-03-04Commit...# lineas originales y nuevas
Longevidad....2024-03-04Commit...def parse_chunk_header(s): 
Longevidad....2024-03-04Commit...  origL, del_N, newL, add_N = Chunk_Header_Pat.match(s).groups()
Longevidad....2024-03-04Commit...  if del_N is None:
Longevidad....2024-03-04Commit...    del_N = 1
Longevidad....2024-03-04Commit...  if add_N is None:
Longevidad....2024-03-04Commit...    add_N = 1
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...  return list(map(int,(origL, del_N, newL, add_N)))
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...# Obtiene el contenido inicial de un archivo en una 
Longevidad....2024-03-04Commit...# revision especifica utilizando el comando "git show"
Longevidad....2024-03-04Commit...# y procesando la salida
Longevidad....2024-03-04Commit...def get_initial_version(first_rev,fn):
Longevidad....2024-03-04Commit...  lines = []
Longevidad....2024-03-04Commit...  file_started_FL = False
Longevidad....2024-03-04Commit...  for line in os.popen('git show %s %s'%(first_rev,fn)):
Longevidad....2024-03-04Commit...    if line=='\ No newline at end of file\n':
Longevidad....2024-03-04Commit...        continue
Longevidad....2024-03-04Commit...    if file_started_FL:
Longevidad....2024-03-04Commit...      assert line[0]=='+',("don't recognize format",line)
Longevidad....2024-03-04Commit...      lines.append(line[1:]) # take out the leading '+'
Longevidad....2024-03-04Commit...    else:
Longevidad....2024-03-04Commit...      if line.startswith('@@ -0,0 '):
Longevidad....2024-03-04Commit...        file_started_FL=True
Longevidad....2024-03-04Commit...  return lines
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...# Busca el indice de una linea dentro de una lista de lineas
Longevidad....2024-03-04Commit...# en un contexto relacionado con commits
Longevidad....2024-03-04Commit...# Segun si la linea ha sido eliminada (decrece) o insertada
Longevidad....2024-03-04Commit...# De esta manera las lineas se ordenan segun su insercion
Longevidad....2024-03-04Commit...def find_index(ALL_LINES,L,current_rev=None):
Longevidad....2024-03-04Commit...  i=0
Longevidad....2024-03-04Commit...  while L:
Longevidad....2024-03-04Commit...    if i==len(ALL_LINES):               # appending to the end
Longevidad....2024-03-04Commit...      return i
Longevidad....2024-03-04Commit...    if ALL_LINES[i].endrev == None: # this line is still alive
Longevidad....2024-03-04Commit...      if ALL_LINES[i].begrev==current_rev: # this line was inserted during the current revision, doesn't count
Longevidad....2024-03-04Commit...        pass
Longevidad....2024-03-04Commit...      else:
Longevidad....2024-03-04Commit...        L-=1 # count the line
Longevidad....2024-03-04Commit...    elif ALL_LINES[i].endrev == current_rev: # still count the line, it was erased during the current revision
Longevidad....2024-03-04Commit...      L-=1
Longevidad....2024-03-04Commit...    i+=1
Longevidad....2024-03-04Commit...  # ffwd through deleted lines
Longevidad....2024-03-04Commit...  while i<len(ALL_LINES) and ALL_LINES[i].endrev!=None:
Longevidad....2024-03-04Commit...    i+=1
Longevidad....2024-03-04Commit...  return i
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...# Busca la siguiente linea que no ha sido eliminada
Longevidad....2024-03-04Commit...# en ningun commit
Longevidad....2024-03-04Commit...def find_next_alive(ALL_LINES,i):
Longevidad....2024-03-04Commit...  while 1:
Longevidad....2024-03-04Commit...    if ALL_LINES[i].endrev==None:
Longevidad....2024-03-04Commit...      return i
Longevidad....2024-03-04Commit...    i+=1
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...# PRINT OUTPUT.JSON
Longevidad....2024-03-04Commit...def save_file(total_data, name_file):
Longevidad....2024-03-04Commit...  #Verificar si existe el archivo, name_file + fecha
Longevidad....2024-03-04Commit...  with open(name_file, 'a') as output_file:
Longevidad....2024-03-04Commit...    output_file.write(total_data)
Longevidad....2024-03-04Commit...    #json.dump(total_data, output_file, indent=2)
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...# Imprime informacion sobre las lineas en la lista ALL_LINES
Longevidad....2024-03-04Commit...# utilizando informacion contenida en el diccionario "revs"
Longevidad....2024-03-04Commit...def print_so_far(ALL_LINES,revs):
Longevidad....2024-03-04Commit...  head_rev = struct()
Longevidad....2024-03-04Commit...  #head_rev.hash = '  HEAD  '
Longevidad....2024-03-04Commit...  head_rev.hash = '        '
Longevidad....2024-03-04Commit...  head_rev.date = '          '
Longevidad....2024-03-04Commit...  head_rev.author = '        '
Longevidad....2024-03-04Commit...  i=0
Longevidad....2024-03-04Commit...  for line in ALL_LINES:
Longevidad....2024-03-04Commit...    beg = revs[line.begrev]
Longevidad....2024-03-04Commit...    end = revs[line.endrev] if line.endrev is not None else head_rev
Longevidad....2024-03-04Commit...    #if line.endrev is None:
Longevidad....2024-03-04Commit...    #  i+=1
Longevidad....2024-03-04Commit...    #  print '%3d'%i,
Longevidad....2024-03-04Commit...    #else:
Longevidad....2024-03-04Commit...    #  print '   ',
Longevidad....2024-03-04Commit...    #print '%s %s %s %s %s %s:'%(beg.hash[:8],end.hash[:8],beg.date,end.date,beg.author,end.author),line.text,
Longevidad....2024-03-04Commit...    #print '(%s %s %s)(%s %s %s)'%(beg.hash[:8],beg.date,beg.author,end.hash[:8],end.date,end.author),line.text,
Longevidad....2024-03-04Commit...    #print '%s (%s %s) %s (%s %s)'%(beg.hash[:8],beg.author,beg.date,end.hash[:8],end.author,end.date),line.text,
Longevidad....2024-03-04Commit...    #print '%s (%s %s) %s (%s %s)'%(beg.hash[:8],beg.author,beg.date,end.hash[:8],end.author,end.date),line.text,
Longevidad....2024-03-04Commit...    if line.endrev is not None:
Longevidad....2024-03-04Commit...      print('-%s (%s %s) +%s (%s %s)'%(end.hash[:8],end.author,end.date,beg.hash[:8],beg.author,beg.date),line.text, end=' ')
Longevidad....2024-03-04Commit...      if line.text.startwith('def'):
Longevidad....2024-03-04Commit...        #Guardar en archivo, y guardo siempre que no tuvo un commit que lo elimino
Longevidad....2024-03-04Commit...        #Verifica que no se haya eliminado
Longevidad....2024-03-04Commit...        fecha_start = beg.date #Comienzo
Longevidad....2024-03-04Commit...        fecha_end = end.date #Final
Longevidad....2024-03-04Commit...        save_file(line.text, 'output.json')
Longevidad....2024-03-04Commit...    else:
Longevidad....2024-03-04Commit...      print(' %s  %s %s  +%s (%s %s)'%(end.hash[:8],end.author,end.date,beg.hash[:8],beg.author,beg.date),line.text, end=' ')
Longevidad....2024-03-04Commit...      save_file(line.text, 'output.json')
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...UsageString="""\
Longevidad....2024-03-04Commit...usage: git-blameall [options] file
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...    -h, --help            Show this help info and exit
Longevidad....2024-03-04Commit...    -q                    Quiet, do not show progress information (Default: off)
Longevidad....2024-03-04Commit...    -v, --version         Show version information
Longevidad....2024-03-04Commit..."""
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...def usage():
Longevidad....2024-03-04Commit...  print(UsageString)
Longevidad....2024-03-04Commit...  sys.exit(1)
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...def main():
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...    # TOTAL_DATA
Longevidad....2024-03-04Commit...    def data(arg1, arg2):
Longevidad....2024-03-04Commit...      total_data =  {
Longevidad....2024-03-04Commit...        "Object1": arg1,
Longevidad....2024-03-04Commit...        "Object2": arg2
Longevidad....2024-03-04Commit...      }
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...      return total_data
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...    if len(sys.argv)==1:
Longevidad....2024-03-04Commit...      usage()
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...    # PROCESS COMMAND LINE ARGUMENTS
Longevidad....2024-03-04Commit...    if 1:
Longevidad....2024-03-04Commit...      Flags, Args = getopt.getopt(sys.argv[1:], 'hqv', ['help','debug', 'version'])
Longevidad....2024-03-04Commit...      Flags = dict(Flags)
Longevidad....2024-03-04Commit...      #print Flags, Args
Longevidad....2024-03-04Commit...      if '-h' in Flags or '--help' in Flags:
Longevidad....2024-03-04Commit...        usage()
Longevidad....2024-03-04Commit...      if '-v' in Flags or '--version' in Flags:
Longevidad....2024-03-04Commit...        print(VERSION)
Longevidad....2024-03-04Commit...        sys.exit()
Longevidad....2024-03-04Commit...      Quiet = '-q' in Flags
Longevidad....2024-03-04Commit...      V = '--debug' in Flags
Longevidad....2024-03-04Commit...      assert len(Args)==1, ("Expecting only one file",Args)
Longevidad....2024-03-04Commit...      fn = Args[0]
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...    # GET ALL REVISIONS
Longevidad....2024-03-04Commit...      # Con el comando cmd obtiene todos los commits del archivo
Longevidad....2024-03-04Commit...      # y los almacena en 'hashes'
Longevidad....2024-03-04Commit...    if 1:
Longevidad....2024-03-04Commit...      cmd         = 'git rev-list HEAD -- %s'%fn
Longevidad....2024-03-04Commit...      if V:
Longevidad....2024-03-04Commit...        print('[cmd]',cmd)
Longevidad....2024-03-04Commit...      pipe        = os.popen(cmd)
Longevidad....2024-03-04Commit...      hashes      = pipe.readlines()
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...      assert not pipe.close(), ('Command errored',cmd)
Longevidad....2024-03-04Commit...      
Longevidad....2024-03-04Commit...      if not Quiet:
Longevidad....2024-03-04Commit...        sys.stderr.write('%d revisions\n'%(len(hashes)))
Longevidad....2024-03-04Commit...      
Longevidad....2024-03-04Commit...    # GET REVISION INFO
Longevidad....2024-03-04Commit...        # Almacena la informacion de los commits en 'date_author'
Longevidad....2024-03-04Commit...        # La longitud de 'hashes' y 'date_author' debe de coincidir,
Longevidad....2024-03-04Commit...        # ya que se corresponde con el nº de commits
Longevidad....2024-03-04Commit...    if 1:
Longevidad....2024-03-04Commit...      cmd         = 'git log --format="%%ad %%cn" --date=short %s'%fn
Longevidad....2024-03-04Commit...      if V:
Longevidad....2024-03-04Commit...        print('[cmd]',cmd)
Longevidad....2024-03-04Commit...      pipe        = os.popen(cmd)
Longevidad....2024-03-04Commit...      date_author = pipe.readlines()
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...      assert not pipe.close(), ('Command errored',cmd)
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...      assert len(hashes)==len(date_author), ('mismatch between output of "git rev-list" and "git log"', hashes, date_author)
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...    # Se crea el objeto revision (revs) 
Longevidad....2024-03-04Commit...    # con atributos como 'hash', 'date' y 'author'
Longevidad....2024-03-04Commit...    revs = []
Longevidad....2024-03-04Commit...    for hash, date_au in zip(hashes,date_author):
Longevidad....2024-03-04Commit...      x = struct()
Longevidad....2024-03-04Commit...      x.hash = hash.strip()
Longevidad....2024-03-04Commit...      x.date, x.author = date_au.split(' ',1)
Longevidad....2024-03-04Commit...      x.author = x.author.strip()
Longevidad....2024-03-04Commit...      revs.append(x)
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...    if not Quiet:
Longevidad....2024-03-04Commit...      sys.stderr.write('%s --- %s\n'%(revs[-1].date,revs[0].date))
Longevidad....2024-03-04Commit...      
Longevidad....2024-03-04Commit...    forced_author_len = 8
Longevidad....2024-03-04Commit...    for x in revs:
Longevidad....2024-03-04Commit...      if len(x.author) > forced_author_len:
Longevidad....2024-03-04Commit...        x.author = x.author[:forced_author_len-1]+'.'
Longevidad....2024-03-04Commit...      else:
Longevidad....2024-03-04Commit...        #x.author = x.author.center(forced_author_len)
Longevidad....2024-03-04Commit...        x.author = x.author.ljust(forced_author_len)
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...    # INITIAL VERSION
Longevidad....2024-03-04Commit...        # Crea objetos linea (ALL_LINES) con
Longevidad....2024-03-04Commit...        # atributos como 'text', 'begrev' y 'endrev'
Longevidad....2024-03-04Commit...    ALL_LINES=[]                        
Longevidad....2024-03-04Commit...    for line in get_initial_version(revs[-1].hash,fn):
Longevidad....2024-03-04Commit...      x = struct()
Longevidad....2024-03-04Commit...      x.text    = line
Longevidad....2024-03-04Commit...      x.begrev  = len(revs)-1
Longevidad....2024-03-04Commit...      x.endrev  = None
Longevidad....2024-03-04Commit...      ALL_LINES.append(x)  
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...    if V:
Longevidad....2024-03-04Commit...      print_so_far(ALL_LINES,revs)
Longevidad....2024-03-04Commit...      save_file(ALL_LINES, 'output.json')
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...    # process all the revisions
Longevidad....2024-03-04Commit...    origL, del_N, newL, add_N = 0,0,0,0
Longevidad....2024-03-04Commit...    for r in range(len(revs)-1,0,-1):
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...      if not Quiet:
Longevidad....2024-03-04Commit...        sys.stderr.write('\r')
Longevidad....2024-03-04Commit...        sys.stderr.write('Processing revision: (%d/%d) %s' % (len(revs)-r+1,len(revs),revs[r-1].date))
Longevidad....2024-03-04Commit...      
Longevidad....2024-03-04Commit...      cmd  = 'git diff -U0 %s %s %s'%(revs[r].hash,revs[r-1].hash,fn)
Longevidad....2024-03-04Commit...      pipe = os.popen(cmd)
Longevidad....2024-03-04Commit...      
Longevidad....2024-03-04Commit...      if V:
Longevidad....2024-03-04Commit...        print('[cmd]',cmd)
Longevidad....2024-03-04Commit...        print()
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...      in_header_FL = True
Longevidad....2024-03-04Commit...      for line in pipe:
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...          if in_header_FL:              # SKIP OVER HEADER
Longevidad....2024-03-04Commit...              if line.startswith('@@'): # we hit our first chunk
Longevidad....2024-03-04Commit...                  in_header_FL = False
Longevidad....2024-03-04Commit...              else:
Longevidad....2024-03-04Commit...                  continue
Longevidad....2024-03-04Commit...              
Longevidad....2024-03-04Commit...          if line=='\ No newline at end of file\n':
Longevidad....2024-03-04Commit...              continue
Longevidad....2024-03-04Commit...              
Longevidad....2024-03-04Commit...          if V: 
Longevidad....2024-03-04Commit...            print('[line]',repr(line),'add_N=%d del_N=%d'%(add_N,del_N))
Longevidad....2024-03-04Commit...          
Longevidad....2024-03-04Commit...          if line.startswith('@@'):     # RECEIVED A NEW CHUNK!
Longevidad....2024-03-04Commit...          
Longevidad....2024-03-04Commit...            origL, del_N, newL, add_N = parse_chunk_header(line)
Longevidad....2024-03-04Commit...            all_index = None
Longevidad....2024-03-04Commit...            if V:
Longevidad....2024-03-04Commit...              print('chunk',origL,del_N,newL,add_N)
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...          elif del_N:                   # PROCESSING DELETED LINES
Longevidad....2024-03-04Commit...          
Longevidad....2024-03-04Commit...            assert line.startswith('-'),line
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...            if all_index is None:       # find index in ALL_LINES for origL
Longevidad....2024-03-04Commit...              all_index = find_index(ALL_LINES, origL-1, current_rev=r-1)
Longevidad....2024-03-04Commit...            else:
Longevidad....2024-03-04Commit...              all_index = find_next_alive(ALL_LINES, all_index)
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...            #if V: 
Longevidad....2024-03-04Commit...            #  print 'DEL origL=%d del_N=%d all_index=%d text=%r'%(origL,del_N,all_index,ALL_LINES[all_index].text)
Longevidad....2024-03-04Commit...                
Longevidad....2024-03-04Commit...            assert ALL_LINES[all_index].text == line[1:], \
Longevidad....2024-03-04Commit...              ("diff processing screwed up, marking the wrong deletion line",ALL_LINES[all_index].text,line,all_index)
Longevidad....2024-03-04Commit...            ALL_LINES[all_index].endrev = r-1
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...            del_N -= 1
Longevidad....2024-03-04Commit...            if del_N == 0:
Longevidad....2024-03-04Commit...              all_index = None
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...          elif add_N:                   # PROCESSING ADDED LINES
Longevidad....2024-03-04Commit...          
Longevidad....2024-03-04Commit...            assert line.startswith('+'),line
Longevidad....2024-03-04Commit...            if all_index is None:
Longevidad....2024-03-04Commit...              all_index = find_index(ALL_LINES, newL-1)
Longevidad....2024-03-04Commit...            else:
Longevidad....2024-03-04Commit...              all_index += 1
Longevidad....2024-03-04Commit...                        
Longevidad....2024-03-04Commit...            x = struct()
Longevidad....2024-03-04Commit...            x.text = line[1:]
Longevidad....2024-03-04Commit...            x.begrev = r-1
Longevidad....2024-03-04Commit...            x.endrev = None
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...            ALL_LINES.insert(all_index, x)
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...            add_N -= 1
Longevidad....2024-03-04Commit...            if add_N == 0:
Longevidad....2024-03-04Commit...              all_index = None
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...          else:
Longevidad....2024-03-04Commit...            if line.startswith('diff'):
Longevidad....2024-03-04Commit...              # This file was deleted, and then recreated, in this situation
Longevidad....2024-03-04Commit...              # we may get several "diff" blocks out of a single git-diff command
Longevidad....2024-03-04Commit...              # start processing the new block
Longevidad....2024-03-04Commit...              in_header_FL = True
Longevidad....2024-03-04Commit...            else:
Longevidad....2024-03-04Commit...              assert 0, ("shouldn't reach here unless misparsed diff output",line)
Longevidad....2024-03-04Commit...          
Longevidad....2024-03-04Commit...      assert not pipe.close(), ('Command errored',cmd)
Longevidad....2024-03-04Commit...      
Longevidad....2024-03-04Commit...      if V:
Longevidad....2024-03-04Commit...        print()
Longevidad....2024-03-04Commit...        print_so_far(ALL_LINES,revs)
Longevidad....2024-03-04Commit...        save_file(ALL_LINES, 'output.json')
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...    if not Quiet:
Longevidad....2024-03-04Commit...      sys.stderr.write('\n')
Longevidad....2024-03-04Commit...    print_so_far(ALL_LINES,revs)
Longevidad....2024-03-04Commit...    print('--- ALL_LINES ---')
Longevidad....2024-03-04Commit...    print(revs)
Longevidad....2024-03-04Commit...    print('--- ---')
Longevidad....2024-03-04Commit...    print(type(revs))
Longevidad....2024-03-04Commit...    print('--- ---')
Longevidad....2024-03-04Commit...    #save_file(ALL_LINES, 'output.json')
Longevidad....2024-03-04Commit...  
Longevidad....2024-03-04Commit...if __name__=='__main__':
Longevidad....2024-03-04Commit...  main()
Longevidad....2024-03-04Commit...#!/usr/bin/env python
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...# Copyright 2011, Dan Gindikin <dgindikin -AT- gmail.com>
Longevidad....2024-03-04Commit...#
Longevidad....2024-03-04Commit...# This program is free software; you can redistribute it and/or modify it under
Longevidad....2024-03-04Commit...# the terms of the GNU General Public License as published by the Free Software
Longevidad....2024-03-04Commit...# Foundation; either version 2 of the License, or (at your option) any later
Longevidad....2024-03-04Commit...# version.
Longevidad....2024-03-04Commit...#
Longevidad....2024-03-04Commit...# This program is distributed in the hope that it will be useful, but WITHOUT
Longevidad....2024-03-04Commit...# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
Longevidad....2024-03-04Commit...# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
Longevidad....2024-03-04Commit...# details.
Longevidad....2024-03-04Commit...#
Longevidad....2024-03-04Commit...# You should have received a copy of the GNU General Public License along with
Longevidad....2024-03-04Commit...# this program; if not, write to the Free Software Foundation, Inc., 51
Longevidad....2024-03-04Commit...# Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...import sys
Longevidad....2024-03-04Commit...import os
Longevidad....2024-03-04Commit...import string
Longevidad....2024-03-04Commit...import re
Longevidad....2024-03-04Commit...import getopt
Longevidad....2024-03-04Commit...import json
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...VERSION = '0.2'
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...Chunk_Header_Pat = re.compile('@@ -([0-9]+)(?:,([0-9]+))? \+([0-9]+)(?:,([0-9]+))? @@')
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...class struct:
Longevidad....2024-03-04Commit...  pass
Longevidad....2024-03-04Commit...  
Longevidad....2024-03-04Commit...# Este codigo sirve para analizar encabezados de fragmentos (chunks) 
Longevidad....2024-03-04Commit...# Devuelve una linea de enteros tras extraer informacion sobre las
Longevidad....2024-03-04Commit...# lineas originales y nuevas
Longevidad....2024-03-04Commit...def parse_chunk_header(s): 
Longevidad....2024-03-04Commit...  origL, del_N, newL, add_N = Chunk_Header_Pat.match(s).groups()
Longevidad....2024-03-04Commit...  if del_N is None:
Longevidad....2024-03-04Commit...    del_N = 1
Longevidad....2024-03-04Commit...  if add_N is None:
Longevidad....2024-03-04Commit...    add_N = 1
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...  return list(map(int,(origL, del_N, newL, add_N)))
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...# Obtiene el contenido inicial de un archivo en una 
Longevidad....2024-03-04Commit...# revision especifica utilizando el comando "git show"
Longevidad....2024-03-04Commit...# y procesando la salida
Longevidad....2024-03-04Commit...def get_initial_version(first_rev,fn):
Longevidad....2024-03-04Commit...  lines = []
Longevidad....2024-03-04Commit...  file_started_FL = False
Longevidad....2024-03-04Commit...  for line in os.popen('git show %s %s'%(first_rev,fn)):
Longevidad....2024-03-04Commit...    if line=='\ No newline at end of file\n':
Longevidad....2024-03-04Commit...        continue
Longevidad....2024-03-04Commit...    if file_started_FL:
Longevidad....2024-03-04Commit...      assert line[0]=='+',("don't recognize format",line)
Longevidad....2024-03-04Commit...      lines.append(line[1:]) # take out the leading '+'
Longevidad....2024-03-04Commit...    else:
Longevidad....2024-03-04Commit...      if line.startswith('@@ -0,0 '):
Longevidad....2024-03-04Commit...        file_started_FL=True
Longevidad....2024-03-04Commit...  return lines
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...# Busca el indice de una linea dentro de una lista de lineas
Longevidad....2024-03-04Commit...# en un contexto relacionado con commits
Longevidad....2024-03-04Commit...# Segun si la linea ha sido eliminada (decrece) o insertada
Longevidad....2024-03-04Commit...# De esta manera las lineas se ordenan segun su insercion
Longevidad....2024-03-04Commit...def find_index(ALL_LINES,L,current_rev=None):
Longevidad....2024-03-04Commit...  i=0
Longevidad....2024-03-04Commit...  while L:
Longevidad....2024-03-04Commit...    if i==len(ALL_LINES):               # appending to the end
Longevidad....2024-03-04Commit...      return i
Longevidad....2024-03-04Commit...    if ALL_LINES[i].endrev == None: # this line is still alive
Longevidad....2024-03-04Commit...      if ALL_LINES[i].begrev==current_rev: # this line was inserted during the current revision, doesn't count
Longevidad....2024-03-04Commit...        pass
Longevidad....2024-03-04Commit...      else:
Longevidad....2024-03-04Commit...        L-=1 # count the line
Longevidad....2024-03-04Commit...    elif ALL_LINES[i].endrev == current_rev: # still count the line, it was erased during the current revision
Longevidad....2024-03-04Commit...      L-=1
Longevidad....2024-03-04Commit...    i+=1
Longevidad....2024-03-04Commit...  # ffwd through deleted lines
Longevidad....2024-03-04Commit...  while i<len(ALL_LINES) and ALL_LINES[i].endrev!=None:
Longevidad....2024-03-04Commit...    i+=1
Longevidad....2024-03-04Commit...  return i
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...# Busca la siguiente linea que no ha sido eliminada
Longevidad....2024-03-04Commit...# en ningun commit
Longevidad....2024-03-04Commit...def find_next_alive(ALL_LINES,i):
Longevidad....2024-03-04Commit...  while 1:
Longevidad....2024-03-04Commit...    if ALL_LINES[i].endrev==None:
Longevidad....2024-03-04Commit...      return i
Longevidad....2024-03-04Commit...    i+=1
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...# PRINT OUTPUT.JSON
Longevidad....2024-03-04Commit...def save_file(total_data, name_file):
Longevidad....2024-03-04Commit...  #Verificar si existe el archivo, name_file + fecha
Longevidad....2024-03-04Commit...  with open(name_file, 'a') as output_file:
Longevidad....2024-03-04Commit...    output_file.write(total_data)
Longevidad....2024-03-04Commit...    #json.dump(total_data, output_file, indent=2)
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...# Imprime informacion sobre las lineas en la lista ALL_LINES
Longevidad....2024-03-04Commit...# utilizando informacion contenida en el diccionario "revs"
Longevidad....2024-03-04Commit...def print_so_far(ALL_LINES,revs):
Longevidad....2024-03-04Commit...  head_rev = struct()
Longevidad....2024-03-04Commit...  #head_rev.hash = '  HEAD  '
Longevidad....2024-03-04Commit...  head_rev.hash = '        '
Longevidad....2024-03-04Commit...  head_rev.date = '          '
Longevidad....2024-03-04Commit...  head_rev.author = '        '
Longevidad....2024-03-04Commit...  i=0
Longevidad....2024-03-04Commit...  for line in ALL_LINES:
Longevidad....2024-03-04Commit...    beg = revs[line.begrev]
Longevidad....2024-03-04Commit...    end = revs[line.endrev] if line.endrev is not None else head_rev
Longevidad....2024-03-04Commit...    #if line.endrev is None:
Longevidad....2024-03-04Commit...    #  i+=1
Longevidad....2024-03-04Commit...    #  print '%3d'%i,
Longevidad....2024-03-04Commit...    #else:
Longevidad....2024-03-04Commit...    #  print '   ',
Longevidad....2024-03-04Commit...    #print '%s %s %s %s %s %s:'%(beg.hash[:8],end.hash[:8],beg.date,end.date,beg.author,end.author),line.text,
Longevidad....2024-03-04Commit...    #print '(%s %s %s)(%s %s %s)'%(beg.hash[:8],beg.date,beg.author,end.hash[:8],end.date,end.author),line.text,
Longevidad....2024-03-04Commit...    #print '%s (%s %s) %s (%s %s)'%(beg.hash[:8],beg.author,beg.date,end.hash[:8],end.author,end.date),line.text,
Longevidad....2024-03-04Commit...    #print '%s (%s %s) %s (%s %s)'%(beg.hash[:8],beg.author,beg.date,end.hash[:8],end.author,end.date),line.text,
Longevidad....2024-03-04Commit...    if line.endrev is not None:
Longevidad....2024-03-04Commit...      print('-%s (%s %s) +%s (%s %s)'%(end.hash[:8],end.author,end.date,beg.hash[:8],beg.author,beg.date),line.text, end=' ')
Longevidad....2024-03-04Commit...      if line.text.startwith('def'):
Longevidad....2024-03-04Commit...        #Guardar en archivo, y guardo siempre que no tuvo un commit que lo elimino
Longevidad....2024-03-04Commit...        #Verifica que no se haya eliminado
Longevidad....2024-03-04Commit...        fecha_start = beg.date #Comienzo
Longevidad....2024-03-04Commit...        fecha_end = end.date #Final
Longevidad....2024-03-04Commit...        save_file(line.text, 'output.json')
Longevidad....2024-03-04Commit...    else:
Longevidad....2024-03-04Commit...      print(' %s  %s %s  +%s (%s %s)'%(end.hash[:8],end.author,end.date,beg.hash[:8],beg.author,beg.date),line.text, end=' ')
Longevidad....2024-03-04Commit...      save_file(line.text, 'output.json')
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...UsageString="""\
Longevidad....2024-03-04Commit...usage: git-blameall [options] file
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...    -h, --help            Show this help info and exit
Longevidad....2024-03-04Commit...    -q                    Quiet, do not show progress information (Default: off)
Longevidad....2024-03-04Commit...    -v, --version         Show version information
Longevidad....2024-03-04Commit..."""
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...def usage():
Longevidad....2024-03-04Commit...  print(UsageString)
Longevidad....2024-03-04Commit...  sys.exit(1)
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...def main():
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...    # TOTAL_DATA
Longevidad....2024-03-04Commit...    def data(arg1, arg2):
Longevidad....2024-03-04Commit...      total_data =  {
Longevidad....2024-03-04Commit...        "Object1": arg1,
Longevidad....2024-03-04Commit...        "Object2": arg2
Longevidad....2024-03-04Commit...      }
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...      return total_data
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...    if len(sys.argv)==1:
Longevidad....2024-03-04Commit...      usage()
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...    # PROCESS COMMAND LINE ARGUMENTS
Longevidad....2024-03-04Commit...    if 1:
Longevidad....2024-03-04Commit...      Flags, Args = getopt.getopt(sys.argv[1:], 'hqv', ['help','debug', 'version'])
Longevidad....2024-03-04Commit...      Flags = dict(Flags)
Longevidad....2024-03-04Commit...      #print Flags, Args
Longevidad....2024-03-04Commit...      if '-h' in Flags or '--help' in Flags:
Longevidad....2024-03-04Commit...        usage()
Longevidad....2024-03-04Commit...      if '-v' in Flags or '--version' in Flags:
Longevidad....2024-03-04Commit...        print(VERSION)
Longevidad....2024-03-04Commit...        sys.exit()
Longevidad....2024-03-04Commit...      Quiet = '-q' in Flags
Longevidad....2024-03-04Commit...      V = '--debug' in Flags
Longevidad....2024-03-04Commit...      assert len(Args)==1, ("Expecting only one file",Args)
Longevidad....2024-03-04Commit...      fn = Args[0]
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...    # GET ALL REVISIONS
Longevidad....2024-03-04Commit...      # Con el comando cmd obtiene todos los commits del archivo
Longevidad....2024-03-04Commit...      # y los almacena en 'hashes'
Longevidad....2024-03-04Commit...    if 1:
Longevidad....2024-03-04Commit...      cmd         = 'git rev-list HEAD -- %s'%fn
Longevidad....2024-03-04Commit...      if V:
Longevidad....2024-03-04Commit...        print('[cmd]',cmd)
Longevidad....2024-03-04Commit...      pipe        = os.popen(cmd)
Longevidad....2024-03-04Commit...      hashes      = pipe.readlines()
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...      assert not pipe.close(), ('Command errored',cmd)
Longevidad....2024-03-04Commit...      
Longevidad....2024-03-04Commit...      if not Quiet:
Longevidad....2024-03-04Commit...        sys.stderr.write('%d revisions\n'%(len(hashes)))
Longevidad....2024-03-04Commit...      
Longevidad....2024-03-04Commit...    # GET REVISION INFO
Longevidad....2024-03-04Commit...        # Almacena la informacion de los commits en 'date_author'
Longevidad....2024-03-04Commit...        # La longitud de 'hashes' y 'date_author' debe de coincidir,
Longevidad....2024-03-04Commit...        # ya que se corresponde con el nº de commits
Longevidad....2024-03-04Commit...    if 1:
Longevidad....2024-03-04Commit...      cmd         = 'git log --format="%%ad %%cn" --date=short %s'%fn
Longevidad....2024-03-04Commit...      if V:
Longevidad....2024-03-04Commit...        print('[cmd]',cmd)
Longevidad....2024-03-04Commit...      pipe        = os.popen(cmd)
Longevidad....2024-03-04Commit...      date_author = pipe.readlines()
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...      assert not pipe.close(), ('Command errored',cmd)
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...      assert len(hashes)==len(date_author), ('mismatch between output of "git rev-list" and "git log"', hashes, date_author)
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...    # Se crea el objeto revision (revs) 
Longevidad....2024-03-04Commit...    # con atributos como 'hash', 'date' y 'author'
Longevidad....2024-03-04Commit...    revs = []
Longevidad....2024-03-04Commit...    for hash, date_au in zip(hashes,date_author):
Longevidad....2024-03-04Commit...      x = struct()
Longevidad....2024-03-04Commit...      x.hash = hash.strip()
Longevidad....2024-03-04Commit...      x.date, x.author = date_au.split(' ',1)
Longevidad....2024-03-04Commit...      x.author = x.author.strip()
Longevidad....2024-03-04Commit...      revs.append(x)
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...    if not Quiet:
Longevidad....2024-03-04Commit...      sys.stderr.write('%s --- %s\n'%(revs[-1].date,revs[0].date))
Longevidad....2024-03-04Commit...      
Longevidad....2024-03-04Commit...    forced_author_len = 8
Longevidad....2024-03-04Commit...    for x in revs:
Longevidad....2024-03-04Commit...      if len(x.author) > forced_author_len:
Longevidad....2024-03-04Commit...        x.author = x.author[:forced_author_len-1]+'.'
Longevidad....2024-03-04Commit...      else:
Longevidad....2024-03-04Commit...        #x.author = x.author.center(forced_author_len)
Longevidad....2024-03-04Commit...        x.author = x.author.ljust(forced_author_len)
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...    # INITIAL VERSION
Longevidad....2024-03-04Commit...        # Crea objetos linea (ALL_LINES) con
Longevidad....2024-03-04Commit...        # atributos como 'text', 'begrev' y 'endrev'
Longevidad....2024-03-04Commit...    ALL_LINES=[]                        
Longevidad....2024-03-04Commit...    for line in get_initial_version(revs[-1].hash,fn):
Longevidad....2024-03-04Commit...      x = struct()
Longevidad....2024-03-04Commit...      x.text    = line
Longevidad....2024-03-04Commit...      x.begrev  = len(revs)-1
Longevidad....2024-03-04Commit...      x.endrev  = None
Longevidad....2024-03-04Commit...      ALL_LINES.append(x)  
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...    if V:
Longevidad....2024-03-04Commit...      print_so_far(ALL_LINES,revs)
Longevidad....2024-03-04Commit...      save_file(ALL_LINES, 'output.json')
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...    # process all the revisions
Longevidad....2024-03-04Commit...    origL, del_N, newL, add_N = 0,0,0,0
Longevidad....2024-03-04Commit...    for r in range(len(revs)-1,0,-1):
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...      if not Quiet:
Longevidad....2024-03-04Commit...        sys.stderr.write('\r')
Longevidad....2024-03-04Commit...        sys.stderr.write('Processing revision: (%d/%d) %s' % (len(revs)-r+1,len(revs),revs[r-1].date))
Longevidad....2024-03-04Commit...      
Longevidad....2024-03-04Commit...      cmd  = 'git diff -U0 %s %s %s'%(revs[r].hash,revs[r-1].hash,fn)
Longevidad....2024-03-04Commit...      pipe = os.popen(cmd)
Longevidad....2024-03-04Commit...      
Longevidad....2024-03-04Commit...      if V:
Longevidad....2024-03-04Commit...        print('[cmd]',cmd)
Longevidad....2024-03-04Commit...        print()
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...      in_header_FL = True
Longevidad....2024-03-04Commit...      for line in pipe:
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...          if in_header_FL:              # SKIP OVER HEADER
Longevidad....2024-03-04Commit...              if line.startswith('@@'): # we hit our first chunk
Longevidad....2024-03-04Commit...                  in_header_FL = False
Longevidad....2024-03-04Commit...              else:
Longevidad....2024-03-04Commit...                  continue
Longevidad....2024-03-04Commit...              
Longevidad....2024-03-04Commit...          if line=='\ No newline at end of file\n':
Longevidad....2024-03-04Commit...              continue
Longevidad....2024-03-04Commit...              
Longevidad....2024-03-04Commit...          if V: 
Longevidad....2024-03-04Commit...            print('[line]',repr(line),'add_N=%d del_N=%d'%(add_N,del_N))
Longevidad....2024-03-04Commit...          
Longevidad....2024-03-04Commit...          if line.startswith('@@'):     # RECEIVED A NEW CHUNK!
Longevidad....2024-03-04Commit...          
Longevidad....2024-03-04Commit...            origL, del_N, newL, add_N = parse_chunk_header(line)
Longevidad....2024-03-04Commit...            all_index = None
Longevidad....2024-03-04Commit...            if V:
Longevidad....2024-03-04Commit...              print('chunk',origL,del_N,newL,add_N)
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...          elif del_N:                   # PROCESSING DELETED LINES
Longevidad....2024-03-04Commit...          
Longevidad....2024-03-04Commit...            assert line.startswith('-'),line
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...            if all_index is None:       # find index in ALL_LINES for origL
Longevidad....2024-03-04Commit...              all_index = find_index(ALL_LINES, origL-1, current_rev=r-1)
Longevidad....2024-03-04Commit...            else:
Longevidad....2024-03-04Commit...              all_index = find_next_alive(ALL_LINES, all_index)
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...            #if V: 
Longevidad....2024-03-04Commit...            #  print 'DEL origL=%d del_N=%d all_index=%d text=%r'%(origL,del_N,all_index,ALL_LINES[all_index].text)
Longevidad....2024-03-04Commit...                
Longevidad....2024-03-04Commit...            assert ALL_LINES[all_index].text == line[1:], \
Longevidad....2024-03-04Commit...              ("diff processing screwed up, marking the wrong deletion line",ALL_LINES[all_index].text,line,all_index)
Longevidad....2024-03-04Commit...            ALL_LINES[all_index].endrev = r-1
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...            del_N -= 1
Longevidad....2024-03-04Commit...            if del_N == 0:
Longevidad....2024-03-04Commit...              all_index = None
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...          elif add_N:                   # PROCESSING ADDED LINES
Longevidad....2024-03-04Commit...          
Longevidad....2024-03-04Commit...            assert line.startswith('+'),line
Longevidad....2024-03-04Commit...            if all_index is None:
Longevidad....2024-03-04Commit...              all_index = find_index(ALL_LINES, newL-1)
Longevidad....2024-03-04Commit...            else:
Longevidad....2024-03-04Commit...              all_index += 1
Longevidad....2024-03-04Commit...                        
Longevidad....2024-03-04Commit...            x = struct()
Longevidad....2024-03-04Commit...            x.text = line[1:]
Longevidad....2024-03-04Commit...            x.begrev = r-1
Longevidad....2024-03-04Commit...            x.endrev = None
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...            ALL_LINES.insert(all_index, x)
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...            add_N -= 1
Longevidad....2024-03-04Commit...            if add_N == 0:
Longevidad....2024-03-04Commit...              all_index = None
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...          else:
Longevidad....2024-03-04Commit...            if line.startswith('diff'):
Longevidad....2024-03-04Commit...              # This file was deleted, and then recreated, in this situation
Longevidad....2024-03-04Commit...              # we may get several "diff" blocks out of a single git-diff command
Longevidad....2024-03-04Commit...              # start processing the new block
Longevidad....2024-03-04Commit...              in_header_FL = True
Longevidad....2024-03-04Commit...            else:
Longevidad....2024-03-04Commit...              assert 0, ("shouldn't reach here unless misparsed diff output",line)
Longevidad....2024-03-04Commit...          
Longevidad....2024-03-04Commit...      assert not pipe.close(), ('Command errored',cmd)
Longevidad....2024-03-04Commit...      
Longevidad....2024-03-04Commit...      if V:
Longevidad....2024-03-04Commit...        print()
Longevidad....2024-03-04Commit...        print_so_far(ALL_LINES,revs)
Longevidad....2024-03-04Commit...        save_file(ALL_LINES, 'output.json')
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...    if not Quiet:
Longevidad....2024-03-04Commit...      sys.stderr.write('\n')
Longevidad....2024-03-04Commit...    print_so_far(ALL_LINES,revs)
Longevidad....2024-03-04Commit...    print('--- ALL_LINES ---')
Longevidad....2024-03-04Commit...    print(revs)
Longevidad....2024-03-04Commit...    print('--- ---')
Longevidad....2024-03-04Commit...    print(type(revs))
Longevidad....2024-03-04Commit...    print('--- ---')
Longevidad....2024-03-04Commit...    #save_file(ALL_LINES, 'output.json')
Longevidad....2024-03-04Commit...  
Longevidad....2024-03-04Commit...if __name__=='__main__':
Longevidad....2024-03-04Commit...  main()
Longevidad....2024-03-04Commit...#!/usr/bin/env python
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...# Copyright 2011, Dan Gindikin <dgindikin -AT- gmail.com>
Longevidad....2024-03-04Commit...#
Longevidad....2024-03-04Commit...# This program is free software; you can redistribute it and/or modify it under
Longevidad....2024-03-04Commit...# the terms of the GNU General Public License as published by the Free Software
Longevidad....2024-03-04Commit...# Foundation; either version 2 of the License, or (at your option) any later
Longevidad....2024-03-04Commit...# version.
Longevidad....2024-03-04Commit...#
Longevidad....2024-03-04Commit...# This program is distributed in the hope that it will be useful, but WITHOUT
Longevidad....2024-03-04Commit...# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
Longevidad....2024-03-04Commit...# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
Longevidad....2024-03-04Commit...# details.
Longevidad....2024-03-04Commit...#
Longevidad....2024-03-04Commit...# You should have received a copy of the GNU General Public License along with
Longevidad....2024-03-04Commit...# this program; if not, write to the Free Software Foundation, Inc., 51
Longevidad....2024-03-04Commit...# Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...import sys
Longevidad....2024-03-04Commit...import os
Longevidad....2024-03-04Commit...import string
Longevidad....2024-03-04Commit...import re
Longevidad....2024-03-04Commit...import getopt
Longevidad....2024-03-04Commit...import json
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...VERSION = '0.2'
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...Chunk_Header_Pat = re.compile('@@ -([0-9]+)(?:,([0-9]+))? \+([0-9]+)(?:,([0-9]+))? @@')
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...class struct:
Longevidad....2024-03-04Commit...  pass
Longevidad....2024-03-04Commit...  
Longevidad....2024-03-04Commit...# Este codigo sirve para analizar encabezados de fragmentos (chunks) 
Longevidad....2024-03-04Commit...# Devuelve una linea de enteros tras extraer informacion sobre las
Longevidad....2024-03-04Commit...# lineas originales y nuevas
Longevidad....2024-03-04Commit...def parse_chunk_header(s): 
Longevidad....2024-03-04Commit...  origL, del_N, newL, add_N = Chunk_Header_Pat.match(s).groups()
Longevidad....2024-03-04Commit...  if del_N is None:
Longevidad....2024-03-04Commit...    del_N = 1
Longevidad....2024-03-04Commit...  if add_N is None:
Longevidad....2024-03-04Commit...    add_N = 1
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...  return list(map(int,(origL, del_N, newL, add_N)))
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...# Obtiene el contenido inicial de un archivo en una 
Longevidad....2024-03-04Commit...# revision especifica utilizando el comando "git show"
Longevidad....2024-03-04Commit...# y procesando la salida
Longevidad....2024-03-04Commit...def get_initial_version(first_rev,fn):
Longevidad....2024-03-04Commit...  lines = []
Longevidad....2024-03-04Commit...  file_started_FL = False
Longevidad....2024-03-04Commit...  for line in os.popen('git show %s %s'%(first_rev,fn)):
Longevidad....2024-03-04Commit...    if line=='\ No newline at end of file\n':
Longevidad....2024-03-04Commit...        continue
Longevidad....2024-03-04Commit...    if file_started_FL:
Longevidad....2024-03-04Commit...      assert line[0]=='+',("don't recognize format",line)
Longevidad....2024-03-04Commit...      lines.append(line[1:]) # take out the leading '+'
Longevidad....2024-03-04Commit...    else:
Longevidad....2024-03-04Commit...      if line.startswith('@@ -0,0 '):
Longevidad....2024-03-04Commit...        file_started_FL=True
Longevidad....2024-03-04Commit...  return lines
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...# Busca el indice de una linea dentro de una lista de lineas
Longevidad....2024-03-04Commit...# en un contexto relacionado con commits
Longevidad....2024-03-04Commit...# Segun si la linea ha sido eliminada (decrece) o insertada
Longevidad....2024-03-04Commit...# De esta manera las lineas se ordenan segun su insercion
Longevidad....2024-03-04Commit...def find_index(ALL_LINES,L,current_rev=None):
Longevidad....2024-03-04Commit...  i=0
Longevidad....2024-03-04Commit...  while L:
Longevidad....2024-03-04Commit...    if i==len(ALL_LINES):               # appending to the end
Longevidad....2024-03-04Commit...      return i
Longevidad....2024-03-04Commit...    if ALL_LINES[i].endrev == None: # this line is still alive
Longevidad....2024-03-04Commit...      if ALL_LINES[i].begrev==current_rev: # this line was inserted during the current revision, doesn't count
Longevidad....2024-03-04Commit...        pass
Longevidad....2024-03-04Commit...      else:
Longevidad....2024-03-04Commit...        L-=1 # count the line
Longevidad....2024-03-04Commit...    elif ALL_LINES[i].endrev == current_rev: # still count the line, it was erased during the current revision
Longevidad....2024-03-04Commit...      L-=1
Longevidad....2024-03-04Commit...    i+=1
Longevidad....2024-03-04Commit...  # ffwd through deleted lines
Longevidad....2024-03-04Commit...  while i<len(ALL_LINES) and ALL_LINES[i].endrev!=None:
Longevidad....2024-03-04Commit...    i+=1
Longevidad....2024-03-04Commit...  return i
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...# Busca la siguiente linea que no ha sido eliminada
Longevidad....2024-03-04Commit...# en ningun commit
Longevidad....2024-03-04Commit...def find_next_alive(ALL_LINES,i):
Longevidad....2024-03-04Commit...  while 1:
Longevidad....2024-03-04Commit...    if ALL_LINES[i].endrev==None:
Longevidad....2024-03-04Commit...      return i
Longevidad....2024-03-04Commit...    i+=1
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...# PRINT OUTPUT.JSON
Longevidad....2024-03-04Commit...def save_file(total_data, name_file):
Longevidad....2024-03-04Commit...  #Verificar si existe el archivo, name_file + fecha
Longevidad....2024-03-04Commit...  with open(name_file, 'a') as output_file:
Longevidad....2024-03-04Commit...    output_file.write(total_data)
Longevidad....2024-03-04Commit...    #json.dump(total_data, output_file, indent=2)
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...# Imprime informacion sobre las lineas en la lista ALL_LINES
Longevidad....2024-03-04Commit...# utilizando informacion contenida en el diccionario "revs"
Longevidad....2024-03-04Commit...def print_so_far(ALL_LINES,revs):
Longevidad....2024-03-04Commit...  head_rev = struct()
Longevidad....2024-03-04Commit...  #head_rev.hash = '  HEAD  '
Longevidad....2024-03-04Commit...  head_rev.hash = '        '
Longevidad....2024-03-04Commit...  head_rev.date = '          '
Longevidad....2024-03-04Commit...  head_rev.author = '        '
Longevidad....2024-03-04Commit...  i=0
Longevidad....2024-03-04Commit...  for line in ALL_LINES:
Longevidad....2024-03-04Commit...    beg = revs[line.begrev]
Longevidad....2024-03-04Commit...    end = revs[line.endrev] if line.endrev is not None else head_rev
Longevidad....2024-03-04Commit...    #if line.endrev is None:
Longevidad....2024-03-04Commit...    #  i+=1
Longevidad....2024-03-04Commit...    #  print '%3d'%i,
Longevidad....2024-03-04Commit...    #else:
Longevidad....2024-03-04Commit...    #  print '   ',
Longevidad....2024-03-04Commit...    #print '%s %s %s %s %s %s:'%(beg.hash[:8],end.hash[:8],beg.date,end.date,beg.author,end.author),line.text,
Longevidad....2024-03-04Commit...    #print '(%s %s %s)(%s %s %s)'%(beg.hash[:8],beg.date,beg.author,end.hash[:8],end.date,end.author),line.text,
Longevidad....2024-03-04Commit...    #print '%s (%s %s) %s (%s %s)'%(beg.hash[:8],beg.author,beg.date,end.hash[:8],end.author,end.date),line.text,
Longevidad....2024-03-04Commit...    #print '%s (%s %s) %s (%s %s)'%(beg.hash[:8],beg.author,beg.date,end.hash[:8],end.author,end.date),line.text,
Longevidad....2024-03-04Commit...    if line.endrev is not None:
Longevidad....2024-03-04Commit...      print('-%s (%s %s) +%s (%s %s)'%(end.hash[:8],end.author,end.date,beg.hash[:8],beg.author,beg.date),line.text, end=' ')
Longevidad....2024-03-04Commit...      if line.text.startwith('def'):
Longevidad....2024-03-04Commit...        #Guardar en archivo, y guardo siempre que no tuvo un commit que lo elimino
Longevidad....2024-03-04Commit...        #Verifica que no se haya eliminado
Longevidad....2024-03-04Commit...        fecha_start = beg.date #Comienzo
Longevidad....2024-03-04Commit...        fecha_end = end.date #Final
Longevidad....2024-03-04Commit...        save_file(line.text, 'output.json')
Longevidad....2024-03-04Commit...    else:
Longevidad....2024-03-04Commit...      print(' %s  %s %s  +%s (%s %s)'%(end.hash[:8],end.author,end.date,beg.hash[:8],beg.author,beg.date),line.text, end=' ')
Longevidad....2024-03-04Commit...      save_file(line.text, 'output.json')
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...UsageString="""\
Longevidad....2024-03-04Commit...usage: git-blameall [options] file
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...    -h, --help            Show this help info and exit
Longevidad....2024-03-04Commit...    -q                    Quiet, do not show progress information (Default: off)
Longevidad....2024-03-04Commit...    -v, --version         Show version information
Longevidad....2024-03-04Commit..."""
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...def usage():
Longevidad....2024-03-04Commit...  print(UsageString)
Longevidad....2024-03-04Commit...  sys.exit(1)
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...def main():
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...    # TOTAL_DATA
Longevidad....2024-03-04Commit...    def data(arg1, arg2):
Longevidad....2024-03-04Commit...      total_data =  {
Longevidad....2024-03-04Commit...        "Object1": arg1,
Longevidad....2024-03-04Commit...        "Object2": arg2
Longevidad....2024-03-04Commit...      }
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...      return total_data
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...    if len(sys.argv)==1:
Longevidad....2024-03-04Commit...      usage()
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...    # PROCESS COMMAND LINE ARGUMENTS
Longevidad....2024-03-04Commit...    if 1:
Longevidad....2024-03-04Commit...      Flags, Args = getopt.getopt(sys.argv[1:], 'hqv', ['help','debug', 'version'])
Longevidad....2024-03-04Commit...      Flags = dict(Flags)
Longevidad....2024-03-04Commit...      #print Flags, Args
Longevidad....2024-03-04Commit...      if '-h' in Flags or '--help' in Flags:
Longevidad....2024-03-04Commit...        usage()
Longevidad....2024-03-04Commit...      if '-v' in Flags or '--version' in Flags:
Longevidad....2024-03-04Commit...        print(VERSION)
Longevidad....2024-03-04Commit...        sys.exit()
Longevidad....2024-03-04Commit...      Quiet = '-q' in Flags
Longevidad....2024-03-04Commit...      V = '--debug' in Flags
Longevidad....2024-03-04Commit...      assert len(Args)==1, ("Expecting only one file",Args)
Longevidad....2024-03-04Commit...      fn = Args[0]
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...    # GET ALL REVISIONS
Longevidad....2024-03-04Commit...      # Con el comando cmd obtiene todos los commits del archivo
Longevidad....2024-03-04Commit...      # y los almacena en 'hashes'
Longevidad....2024-03-04Commit...    if 1:
Longevidad....2024-03-04Commit...      cmd         = 'git rev-list HEAD -- %s'%fn
Longevidad....2024-03-04Commit...      if V:
Longevidad....2024-03-04Commit...        print('[cmd]',cmd)
Longevidad....2024-03-04Commit...      pipe        = os.popen(cmd)
Longevidad....2024-03-04Commit...      hashes      = pipe.readlines()
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...      assert not pipe.close(), ('Command errored',cmd)
Longevidad....2024-03-04Commit...      
Longevidad....2024-03-04Commit...      if not Quiet:
Longevidad....2024-03-04Commit...        sys.stderr.write('%d revisions\n'%(len(hashes)))
Longevidad....2024-03-04Commit...      
Longevidad....2024-03-04Commit...    # GET REVISION INFO
Longevidad....2024-03-04Commit...        # Almacena la informacion de los commits en 'date_author'
Longevidad....2024-03-04Commit...        # La longitud de 'hashes' y 'date_author' debe de coincidir,
Longevidad....2024-03-04Commit...        # ya que se corresponde con el nº de commits
Longevidad....2024-03-04Commit...    if 1:
Longevidad....2024-03-04Commit...      cmd         = 'git log --format="%%ad %%cn" --date=short %s'%fn
Longevidad....2024-03-04Commit...      if V:
Longevidad....2024-03-04Commit...        print('[cmd]',cmd)
Longevidad....2024-03-04Commit...      pipe        = os.popen(cmd)
Longevidad....2024-03-04Commit...      date_author = pipe.readlines()
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...      assert not pipe.close(), ('Command errored',cmd)
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...      assert len(hashes)==len(date_author), ('mismatch between output of "git rev-list" and "git log"', hashes, date_author)
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...    # Se crea el objeto revision (revs) 
Longevidad....2024-03-04Commit...    # con atributos como 'hash', 'date' y 'author'
Longevidad....2024-03-04Commit...    revs = []
Longevidad....2024-03-04Commit...    for hash, date_au in zip(hashes,date_author):
Longevidad....2024-03-04Commit...      x = struct()
Longevidad....2024-03-04Commit...      x.hash = hash.strip()
Longevidad....2024-03-04Commit...      x.date, x.author = date_au.split(' ',1)
Longevidad....2024-03-04Commit...      x.author = x.author.strip()
Longevidad....2024-03-04Commit...      revs.append(x)
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...    if not Quiet:
Longevidad....2024-03-04Commit...      sys.stderr.write('%s --- %s\n'%(revs[-1].date,revs[0].date))
Longevidad....2024-03-04Commit...      
Longevidad....2024-03-04Commit...    forced_author_len = 8
Longevidad....2024-03-04Commit...    for x in revs:
Longevidad....2024-03-04Commit...      if len(x.author) > forced_author_len:
Longevidad....2024-03-04Commit...        x.author = x.author[:forced_author_len-1]+'.'
Longevidad....2024-03-04Commit...      else:
Longevidad....2024-03-04Commit...        #x.author = x.author.center(forced_author_len)
Longevidad....2024-03-04Commit...        x.author = x.author.ljust(forced_author_len)
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...    # INITIAL VERSION
Longevidad....2024-03-04Commit...        # Crea objetos linea (ALL_LINES) con
Longevidad....2024-03-04Commit...        # atributos como 'text', 'begrev' y 'endrev'
Longevidad....2024-03-04Commit...    ALL_LINES=[]                        
Longevidad....2024-03-04Commit...    for line in get_initial_version(revs[-1].hash,fn):
Longevidad....2024-03-04Commit...      x = struct()
Longevidad....2024-03-04Commit...      x.text    = line
Longevidad....2024-03-04Commit...      x.begrev  = len(revs)-1
Longevidad....2024-03-04Commit...      x.endrev  = None
Longevidad....2024-03-04Commit...      ALL_LINES.append(x)  
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...    if V:
Longevidad....2024-03-04Commit...      print_so_far(ALL_LINES,revs)
Longevidad....2024-03-04Commit...      save_file(ALL_LINES, 'output.json')
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...    # process all the revisions
Longevidad....2024-03-04Commit...    origL, del_N, newL, add_N = 0,0,0,0
Longevidad....2024-03-04Commit...    for r in range(len(revs)-1,0,-1):
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...      if not Quiet:
Longevidad....2024-03-04Commit...        sys.stderr.write('\r')
Longevidad....2024-03-04Commit...        sys.stderr.write('Processing revision: (%d/%d) %s' % (len(revs)-r+1,len(revs),revs[r-1].date))
Longevidad....2024-03-04Commit...      
Longevidad....2024-03-04Commit...      cmd  = 'git diff -U0 %s %s %s'%(revs[r].hash,revs[r-1].hash,fn)
Longevidad....2024-03-04Commit...      pipe = os.popen(cmd)
Longevidad....2024-03-04Commit...      
Longevidad....2024-03-04Commit...      if V:
Longevidad....2024-03-04Commit...        print('[cmd]',cmd)
Longevidad....2024-03-04Commit...        print()
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...      in_header_FL = True
Longevidad....2024-03-04Commit...      for line in pipe:
Longevidad....2024-03-04Commit...
Longevidad....2024-03-04Commit...          if in_header_FL:              # SKIP OVER HEADER
Longevidad....2024-03-04Commit...              if line.startswith('@@'): # we hit our first chunk
Longevidad....2024-03-04Commit...                  in_header_FL = False
Longevidad....2024-03-04Commit...              else:
Longevidad....2024-03-04Commit...                  continue
Longevidad....2024-03-04Commit...              
Longevidad....2024-03-04Commit...          if line=='\ No newline at end of file\n':
Longevidad....2024-03-04Commit...              continue
Longevidad....2024-03-04Commit...              
Longevidad....2024-03-04Commit...          if V: 
Longevidad....2024-03-04Commit...            print('[line]',repr(line),'add_N=%d del_N=%d'%(add_N,del_N))
Longevidad....2024-03-04Commit...          
Longevidad....2024-03-04Commit...          if line.startswith('@@'):     # RECEIVED A NEW CHUNK!
Longevidad....2024-03-04Commit...          
Longevidad....2024-03-04Commit...            origL, del_N, newL, add_N = parse_chunk_header(line)
Longevidad....2024-03-04Commit...            all_index = None
Longevidad....2024-03-04Commit...            if V:
Longevidad....2024-03-04Commit...              print('chunk',origL,del_N,newL,add_N)
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...          elif del_N:                   # PROCESSING DELETED LINES
Longevidad....2024-03-04Commit...          
Longevidad....2024-03-04Commit...            assert line.startswith('-'),line
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...            if all_index is None:       # find index in ALL_LINES for origL
Longevidad....2024-03-04Commit...              all_index = find_index(ALL_LINES, origL-1, current_rev=r-1)
Longevidad....2024-03-04Commit...            else:
Longevidad....2024-03-04Commit...              all_index = find_next_alive(ALL_LINES, all_index)
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...            #if V: 
Longevidad....2024-03-04Commit...            #  print 'DEL origL=%d del_N=%d all_index=%d text=%r'%(origL,del_N,all_index,ALL_LINES[all_index].text)
Longevidad....2024-03-04Commit...                
Longevidad....2024-03-04Commit...            assert ALL_LINES[all_index].text == line[1:], \
Longevidad....2024-03-04Commit...              ("diff processing screwed up, marking the wrong deletion line",ALL_LINES[all_index].text,line,all_index)
Longevidad....2024-03-04Commit...            ALL_LINES[all_index].endrev = r-1
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...            del_N -= 1
Longevidad....2024-03-04Commit...            if del_N == 0:
Longevidad....2024-03-04Commit...              all_index = None
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...          elif add_N:                   # PROCESSING ADDED LINES
Longevidad....2024-03-04Commit...          
Longevidad....2024-03-04Commit...            assert line.startswith('+'),line
Longevidad....2024-03-04Commit...            if all_index is None:
Longevidad....2024-03-04Commit...              all_index = find_index(ALL_LINES, newL-1)
Longevidad....2024-03-04Commit...            else:
Longevidad....2024-03-04Commit...              all_index += 1
Longevidad....2024-03-04Commit...                        
Longevidad....2024-03-04Commit...            x = struct()
Longevidad....2024-03-04Commit...            x.text = line[1:]
Longevidad....2024-03-04Commit...            x.begrev = r-1
Longevidad....2024-03-04Commit...            x.endrev = None
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...            ALL_LINES.insert(all_index, x)
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...            add_N -= 1
Longevidad....2024-03-04Commit...            if add_N == 0:
Longevidad....2024-03-04Commit...              all_index = None
Longevidad....2024-03-04Commit...            
Longevidad....2024-03-04Commit...          else:
Longevidad....2024-03-04Commit...            if line.startswith('diff'):
Longevidad....2024-03-04Commit...              # This file was deleted, and then recreated, in this situation
Longevidad....2024-03-04Commit...              # we may get several "diff" blocks out of a single git-diff command
Longevidad....2024-03-04Commit...              # start processing the new block
Longevidad....2024-03-04Commit...              in_header_FL = True
Longevidad....2024-03-04Commit...            else:
Longevidad....2024-03-04Commit...              assert 0, ("shouldn't reach here unless misparsed diff output",line)
Longevidad....2024-03-04Commit...          
Longevidad....2024-03-04Commit...      assert not pipe.close(), ('Command errored',cmd)
Longevidad....2024-03-04Commit...      
Longevidad....2024-03-04Commit...      if V:
Longevidad....2024-03-04Commit...        print()
Longevidad....2024-03-04Commit...        print_so_far(ALL_LINES,revs)
Longevidad....2024-03-04Commit...        save_file(ALL_LINES, 'output.json')
Longevidad....2024-03-04Commit...    
Longevidad....2024-03-04Commit...    if not Quiet:
Longevidad....2024-03-04Commit...      sys.stderr.write('\n')
Longevidad....2024-03-04Commit...    print_so_far(ALL_LINES,revs)
Longevidad....2024-03-04Commit...    print('--- ALL_LINES ---')
Longevidad....2024-03-04Commit...    print(revs)
Longevidad....2024-03-04Commit...    print('--- ---')
Longevidad....2024-03-04Commit...    print(type(revs))
Longevidad....2024-03-04Commit...    print('--- ---')
Longevidad....2024-03-04Commit...    #save_file(ALL_LINES, 'output.json')
Longevidad....2024-03-04Commit...  
Longevidad....2024-03-04Commit...if __name__=='__main__':
Longevidad....2024-03-04Commit...  main()
Longevidad....2024-03-04